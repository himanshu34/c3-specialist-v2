plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.appdistribution'
    id 'dagger.hilt.android.plugin'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
}

// Load keystore properties
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    keystoreProperties.setProperty("keyAlias", String.valueOf(System.getenv('KEY_ALIAS')))
    keystoreProperties.setProperty("keyPassword", String.valueOf(System.getenv('KEY_PASSWORD')))
    keystoreProperties.setProperty("storeFile", String.valueOf(System.getenv('STORE_FILE')))
    keystoreProperties.setProperty("storePassword", String.valueOf(System.getenv('STORE_PASSWORD')))
}

tasks.register('incrementVersionCode') {
    doLast {
        def versionPropsFile = file('version.properties')
        if (versionPropsFile.canRead()) {
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            def code = versionProps['VERSION_CODE'].toInteger() + 1
            versionProps['VERSION_CODE'] = code.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        } else {
            throw new GradleException("Could not read version.properties!")
        }
    }
}

tasks.configureEach { task ->
    if (task.name == 'generateDevReleaseBuildConfig' ||
            task.name == 'generateQaReleaseBuildConfig' ||
            task.name == 'generateProductionReleaseBuildConfig') {
        task.dependsOn 'incrementVersionCode'
    }
}

android {
    namespace 'co.nayan.c3specialist_v2'
    compileSdk 34

    buildFeatures {
        viewBinding true
        dataBinding true
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }


    defaultConfig {
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def code = versionProps['VERSION_CODE'].toInteger() + 1
        def name = versionProps['VERSION_NAME']
        defaultConfig {
            applicationId "co.nayan.c3specialist_v2"
            minSdk 23
            targetSdk 34
            versionCode code
            versionName name
            vectorDrawables.useSupportLibrary = true
            multiDexEnabled true
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    sourceSets.main {
        jniLibs.srcDir 'libs'
        //disable automatic ndk-build call
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"
            debuggable true
        }
    }

    flavorDimensions += "api-environment"
    productFlavors {
        create("dev") {
            dimension 'api-environment'
            applicationIdSuffix ".dev"
            manifestPlaceholders = [packageId: "${applicationId}", djiSdkKey:"622d2e58488645328f42d210", contentProviderAuthority: "co.nayan.c3specialist_v2.dev.AccessTokenProvider", contentProviderPermission: "co.nayan.c3specialist_v2.dev.shared_content_provider.AUTH_PERMISSION"]
            getBaseUrlConfig('./config/dev.props').each { params ->
                buildConfigField 'String', params.key, params.value
            }
            firebaseAppDistribution {
                releaseNotesFile = "app/releasenotes.txt"
                groups = "dev, testers"
                serviceCredentialsFile = project.projectDir.toString() + "/c3_specialist_firebase_credential.json"
            }
            resValue "string", "app_name", "Nayan DEV"
        }
        create("qa") {
            dimension 'api-environment'
            applicationIdSuffix ".qa"
            manifestPlaceholders = [packageId: "${applicationId}", djiSdkKey:"622d2e58488645328f42d210", contentProviderAuthority: "co.nayan.c3specialist_v2.qa.AccessTokenProvider", contentProviderPermission: "co.nayan.c3specialist_v2.qa.shared_content_provider.AUTH_PERMISSION"]
            getBaseUrlConfig('./config/qa.props').each { params ->
                buildConfigField 'String', params.key, params.value
            }
            firebaseAppDistribution {
                releaseNotesFile = "app/releasenotes.txt"
                groups = "dev, testers"
                serviceCredentialsFile = project.projectDir.toString() + "/c3_specialist_firebase_credential.json"
            }
            resValue "string", "app_name", "Nayan QA"
        }
        create("production") {
            dimension 'api-environment'
            applicationIdSuffix ".production"
            manifestPlaceholders = [packageId: "${applicationId}", djiSdkKey:"d4fc7ccc256c2a9343054771", contentProviderAuthority: "co.nayan.c3specialist_v2.production.AccessTokenProvider", contentProviderPermission: "co.nayan.c3specialist_v2.production.shared_content_provider.AUTH_PERMISSION"]
            getBaseUrlConfig('./config/prod.props').each { params ->
                buildConfigField 'String', params.key, params.value
            }
            firebaseAppDistribution {
                releaseNotesFile = "app/releasenotes.txt"
                groups = "dev, specialists"
                serviceCredentialsFile = project.projectDir.toString() + "/c3_specialist_firebase_credential.json"
            }
            resValue "string", "app_name", "Nayan"
        }
    }

    packagingOptions {
        jniLibs {
            pickFirsts += ['**/*.so']
            useLegacyPackaging = true
        }
    }
}

def getBaseUrlConfig(path) {
    Properties props = new Properties()
    props.load(new FileInputStream(file(path)))
    return props
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(':login')
    implementation project(':core')
    implementation project(':nayan-cam-v2')
    implementation project(':canvas')
    implementation project(':review')
    implementation project(':appsession')
    implementation project(':c3views')
    implementation project(':tutorial')
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.12.0-rc01'
    // timber for logging
    implementation "com.jakewharton.timber:timber:$timber_version"
    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    // dagger-hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    kapt 'androidx.hilt:hilt-compiler:1.2.0'
    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    // arch components
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // kotlin extension
    implementation "androidx.fragment:fragment-ktx:$fragment_extention_version"
    implementation "androidx.activity:activity-ktx:$activity_extention_version"
    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:32.8.0')
    // When using the BoM, you don't specify versions in Firebase library dependencies
    // Firebase Auth
    implementation 'com.google.firebase:firebase-auth-ktx'
    // Firebase Messaging
    implementation 'com.google.firebase:firebase-messaging-ktx'
    // Tooltip
    implementation 'com.github.skydoves:balloon:1.6.4'
    // timeAgo
    implementation 'com.github.marlonlom:timeago:4.0.3'
    // Glide
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    kapt 'com.github.bumptech.glide:compiler:4.16.0'
    // Shimmer
    implementation 'com.facebook.shimmer:shimmer:0.5.0@aar'
    // Lottie Animation
    implementation 'com.airbnb.android:lottie:6.4.0'
    // PhotoView
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    // Floating text button
    implementation 'com.github.dimorinny:floating-text-button:0.0.4'
    // Action-cable
    implementation 'com.github.hosopy:actioncable-client-java:0.1.2'
    // WebRTC
    implementation 'org.webrtc:google-webrtc:1.0.32006'
    // SMS verification
    implementation 'com.google.android.gms:play-services-auth:21.0.0'
    implementation 'com.google.android.gms:play-services-auth-api-phone:18.0.2'
    // Facebook Login
    implementation 'com.facebook.android:facebook-login:17.0.0'
    // Work manager dependency
    implementation "androidx.work:work-runtime-ktx:2.9.0"
    implementation 'androidx.hilt:hilt-work:1.2.0'
    // Country Phone Detector
    implementation 'io.michaelrocks:libphonenumber-android:8.13.28'
    // CircleImageView
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    // Image Compression
    implementation 'id.zelory:compressor:3.0.1'
    // Install Referrer
    implementation 'com.android.installreferrer:installreferrer:2.2'

    // Tests
    implementation 'androidx.test.ext:junit-ktx:1.1.5'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.5.2'
}